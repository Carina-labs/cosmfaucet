// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/faucetpb/faucet.proto

package faucetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FaucetServiceClient is the client API for FaucetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaucetServiceClient interface {
	GiveMe(ctx context.Context, in *GiveMeRequest, opts ...grpc.CallOption) (*GiveMeResponse, error)
	Chains(ctx context.Context, in *GetChainsRequest, opts ...grpc.CallOption) (*GetChainsResponse, error)
}

type faucetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFaucetServiceClient(cc grpc.ClientConnInterface) FaucetServiceClient {
	return &faucetServiceClient{cc}
}

func (c *faucetServiceClient) GiveMe(ctx context.Context, in *GiveMeRequest, opts ...grpc.CallOption) (*GiveMeResponse, error) {
	out := new(GiveMeResponse)
	err := c.cc.Invoke(ctx, "/example.FaucetService/GiveMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetServiceClient) Chains(ctx context.Context, in *GetChainsRequest, opts ...grpc.CallOption) (*GetChainsResponse, error) {
	out := new(GetChainsResponse)
	err := c.cc.Invoke(ctx, "/example.FaucetService/Chains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaucetServiceServer is the server API for FaucetService service.
// All implementations must embed UnimplementedFaucetServiceServer
// for forward compatibility
type FaucetServiceServer interface {
	GiveMe(context.Context, *GiveMeRequest) (*GiveMeResponse, error)
	Chains(context.Context, *GetChainsRequest) (*GetChainsResponse, error)
	mustEmbedUnimplementedFaucetServiceServer()
}

// UnimplementedFaucetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFaucetServiceServer struct {
}

func (UnimplementedFaucetServiceServer) GiveMe(context.Context, *GiveMeRequest) (*GiveMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveMe not implemented")
}
func (UnimplementedFaucetServiceServer) Chains(context.Context, *GetChainsRequest) (*GetChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chains not implemented")
}
func (UnimplementedFaucetServiceServer) mustEmbedUnimplementedFaucetServiceServer() {}

// UnsafeFaucetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaucetServiceServer will
// result in compilation errors.
type UnsafeFaucetServiceServer interface {
	mustEmbedUnimplementedFaucetServiceServer()
}

func RegisterFaucetServiceServer(s grpc.ServiceRegistrar, srv FaucetServiceServer) {
	s.RegisterService(&FaucetService_ServiceDesc, srv)
}

func _FaucetService_GiveMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetServiceServer).GiveMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.FaucetService/GiveMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetServiceServer).GiveMe(ctx, req.(*GiveMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaucetService_Chains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetServiceServer).Chains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.FaucetService/Chains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetServiceServer).Chains(ctx, req.(*GetChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FaucetService_ServiceDesc is the grpc.ServiceDesc for FaucetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaucetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.FaucetService",
	HandlerType: (*FaucetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GiveMe",
			Handler:    _FaucetService_GiveMe_Handler,
		},
		{
			MethodName: "Chains",
			Handler:    _FaucetService_Chains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/faucetpb/faucet.proto",
}
